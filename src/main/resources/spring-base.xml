<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 开启注解支持 -->
	<context:annotation-config />
	<!-- 自动注册指定包下的类 -->
	<context:component-scan base-package="me.jiantao" />
	<!-- 导入外部的properties文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource" />

		<!-- hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 实体类 -->
		<property name="annotatedClasses">
			<list>
				<value>me.jiantao.po.Article</value>
			</list>
		</property>
	</bean>


	<!-- 数据源 -->
	<!-- 
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	 -->
	 <!-- c3p0连接池 -->
     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
         <!-- 数据连接信息 -->
         <property name="jdbcUrl" value="${jdbc.url}"/>
         <property name="driverClass" value="${jdbc.driverClassName}"/>
         <property name="user" value="${jdbc.user}"/>
         <property name="password" value="${jdbc.password}"/>
         <!-- 其他配置 -->
         <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
         <property name="initialPoolSize" value="3"></property>
         <!--连接池中保留的最小连接数。Default: 3 -->
         <property name="minPoolSize" value="3"></property>
         <!--连接池中保留的最大连接数。Default: 15 -->
         <property name="maxPoolSize" value="5"></property>
         <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
         <property name="acquireIncrement" value="3"></property>
         <!-- 控制数据源内加载的PreparedStatements数量。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
         <property name="maxStatements" value="8"></property>
         <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
         <property name="maxStatementsPerConnection" value="5"></property>
         <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
         <property name="maxIdleTime" value="1800"></property>
     </bean>

	<!-- 配置Hibernate事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 事务通知配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 要拦截的方法 -->
		<tx:attributes>
			<!-- 拦截以指定方法，并配置事务传播属性 -->
			<tx:method name="*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<!-- 
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="get*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			 -->
			<!-- 
			拦截以get开头的方法，表示事务只读 
			<tx:method name="get*" propagation="REQUIRED" isolation="READ_COMMITTED"
				read-only="true" /> 
			-->
				
		</tx:attributes>
	</tx:advice>

	<!-- aop配置 -->
	<aop:config>
		<!-- 定义名为"serviceMethod"的切点，拦截com.demo.service及其子包下所有的类的方法 -->
		<aop:pointcut id="serviceMethod" expression="execution(* me.jiantao.service..*.*(..))" />
		<!-- 切入点为serviceMethod，事务通知为txAdvice -->
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	
	<!-- 声明式事务配置 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>  
</beans>  